{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Check for existing user session\nconst savedUser=localStorage.getItem('user');if(savedUser){setUser(JSON.parse(savedUser));}setLoading(false);},[]);const login=async provider=>{setLoading(true);try{// Simulate authentication process\n// In a real app, you would integrate with Auth0, Firebase, or your own auth service\nconst mockUser={id:\"user_\".concat(Date.now()),email:\"user@\".concat(provider,\".com\"),name:\"User from \".concat(provider),picture:\"https://via.placeholder.com/150/3b82f6/ffffff?text=\".concat(provider.charAt(0).toUpperCase()),provider};setUser(mockUser);localStorage.setItem('user',JSON.stringify(mockUser));// Simulate API call delay\nawait new Promise(resolve=>setTimeout(resolve,1000));}catch(error){console.error('Login failed:',error);}finally{setLoading(false);}};const logout=()=>{setUser(null);localStorage.removeItem('user');};const value={user,loading,login,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","savedUser","localStorage","getItem","JSON","parse","login","provider","mockUser","id","concat","Date","now","email","name","picture","charAt","toUpperCase","setItem","stringify","Promise","resolve","setTimeout","error","console","logout","removeItem","value","Provider"],"sources":["/Users/thitiwutphophan/shop/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User } from '../types';\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (provider: 'facebook' | 'discord' | 'google') => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing user session\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (provider: 'facebook' | 'discord' | 'google') => {\n    setLoading(true);\n    try {\n      // Simulate authentication process\n      // In a real app, you would integrate with Auth0, Firebase, or your own auth service\n      const mockUser: User = {\n        id: `user_${Date.now()}`,\n        email: `user@${provider}.com`,\n        name: `User from ${provider}`,\n        picture: `https://via.placeholder.com/150/3b82f6/ffffff?text=${provider.charAt(0).toUpperCase()}`,\n        provider,\n      };\n      \n      setUser(mockUser);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n      \n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error) {\n      console.error('Login failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAUzF,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAA8BO,SAAS,CAAC,CAEzE,MAAO,MAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGR,UAAU,CAACK,WAAW,CAAC,CACvC,GAAIG,OAAO,GAAKF,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAG,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAMD,MAAO,MAAM,CAAAE,YAAyC,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACpE,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGb,QAAQ,CAAc,IAAI,CAAC,CACnD,KAAM,CAACc,OAAO,CAAEC,UAAU,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAe,SAAS,CAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAC9C,GAAIF,SAAS,CAAE,CACbH,OAAO,CAACM,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAC,CAChC,CACAD,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAM,KAAK,CAAG,KAAO,CAAAC,QAA2C,EAAK,CACnEP,UAAU,CAAC,IAAI,CAAC,CAChB,GAAI,CACF;AACA;AACA,KAAM,CAAAQ,QAAc,CAAG,CACrBC,EAAE,SAAAC,MAAA,CAAUC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAE,CACxBC,KAAK,SAAAH,MAAA,CAAUH,QAAQ,QAAM,CAC7BO,IAAI,cAAAJ,MAAA,CAAeH,QAAQ,CAAE,CAC7BQ,OAAO,uDAAAL,MAAA,CAAwDH,QAAQ,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAE,CACjGV,QACF,CAAC,CAEDT,OAAO,CAACU,QAAQ,CAAC,CACjBN,YAAY,CAACgB,OAAO,CAAC,MAAM,CAAEd,IAAI,CAACe,SAAS,CAACX,QAAQ,CAAC,CAAC,CAEtD;AACA,KAAM,IAAI,CAAAY,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CACzD,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,eAAe,CAAEA,KAAK,CAAC,CACvC,CAAC,OAAS,CACRvB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAAyB,MAAM,CAAGA,CAAA,GAAM,CACnB3B,OAAO,CAAC,IAAI,CAAC,CACbI,YAAY,CAACwB,UAAU,CAAC,MAAM,CAAC,CACjC,CAAC,CAED,KAAM,CAAAC,KAAK,CAAG,CACZ9B,IAAI,CACJE,OAAO,CACPO,KAAK,CACLmB,MACF,CAAC,CAED,mBACErC,IAAA,CAACC,WAAW,CAACuC,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAA/B,QAAA,CAChCA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}