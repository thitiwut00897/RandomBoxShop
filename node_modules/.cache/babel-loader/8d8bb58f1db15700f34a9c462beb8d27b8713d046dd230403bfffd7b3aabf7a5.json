{"ast":null,"code":"// Fetch pets from the Grow a Garden API\nconst fetchPetsFromAPI = async () => {\n  try {\n    const response = await fetch('https://api.joshlei.com/v2/growagarden/info/');\n    const data = await response.json();\n    if (data && data.pets) {\n      return data.pets.map(pet => ({\n        id: pet.id || pet.name,\n        name: pet.name,\n        rarity: pet.rarity || 'Common',\n        image: pet.image || '🐾',\n        probability: pet.probability || 0.1,\n        description: pet.description || `A ${pet.rarity || 'Common'} pet from Grow a Garden`\n      }));\n    }\n    return [];\n  } catch (error) {\n    console.error('Error fetching pets from API:', error);\n    return getFallbackPets();\n  }\n};\n\n// Fallback pets in case API fails\nconst getFallbackPets = () => [\n// Common pets (40% probability)\n{\n  id: '1',\n  name: 'Common Cat',\n  rarity: 'Common',\n  image: '🐱',\n  probability: 0.4,\n  description: 'A friendly common cat'\n}, {\n  id: '2',\n  name: 'Common Dog',\n  rarity: 'Common',\n  image: '🐕',\n  probability: 0.4,\n  description: 'A loyal common dog'\n}, {\n  id: '3',\n  name: 'Common Bird',\n  rarity: 'Common',\n  image: '🐦',\n  probability: 0.4,\n  description: 'A cheerful common bird'\n}, {\n  id: '4',\n  name: 'Common Fish',\n  rarity: 'Common',\n  image: '🐠',\n  probability: 0.4,\n  description: 'A swimming common fish'\n},\n// Uncommon pets (25% probability)\n{\n  id: '5',\n  name: 'Uncommon Fox',\n  rarity: 'Uncommon',\n  image: '🦊',\n  probability: 0.25,\n  description: 'A clever uncommon fox'\n}, {\n  id: '6',\n  name: 'Uncommon Rabbit',\n  rarity: 'Uncommon',\n  image: '🐰',\n  probability: 0.25,\n  description: 'A quick uncommon rabbit'\n}, {\n  id: '7',\n  name: 'Uncommon Bear',\n  rarity: 'Uncommon',\n  image: '🐻',\n  probability: 0.25,\n  description: 'A strong uncommon bear'\n}, {\n  id: '8',\n  name: 'Uncommon Deer',\n  rarity: 'Uncommon',\n  image: '🦌',\n  probability: 0.25,\n  description: 'A graceful uncommon deer'\n},\n// Rare pets (20% probability)\n{\n  id: '9',\n  name: 'Rare Dragon',\n  rarity: 'Rare',\n  image: '🐉',\n  probability: 0.2,\n  description: 'A powerful rare dragon'\n}, {\n  id: '10',\n  name: 'Rare Phoenix',\n  rarity: 'Rare',\n  image: '🦅',\n  probability: 0.2,\n  description: 'A majestic rare phoenix'\n}, {\n  id: '11',\n  name: 'Rare Unicorn',\n  rarity: 'Rare',\n  image: '🦄',\n  probability: 0.2,\n  description: 'A magical rare unicorn'\n}, {\n  id: '12',\n  name: 'Rare Griffin',\n  rarity: 'Rare',\n  image: '🦁',\n  probability: 0.2,\n  description: 'A noble rare griffin'\n},\n// Legendary pets (10% probability)\n{\n  id: '13',\n  name: 'Legendary Leviathan',\n  rarity: 'Legendary',\n  image: '🐋',\n  probability: 0.1,\n  description: 'A massive legendary leviathan'\n}, {\n  id: '14',\n  name: 'Legendary Kraken',\n  rarity: 'Legendary',\n  image: '🦑',\n  probability: 0.1,\n  description: 'A fearsome legendary kraken'\n}, {\n  id: '15',\n  name: 'Legendary Hydra',\n  rarity: 'Legendary',\n  image: '🐍',\n  probability: 0.1,\n  description: 'A multi-headed legendary hydra'\n},\n// Mythical pets (3% probability)\n{\n  id: '16',\n  name: 'Mythical Celestial',\n  rarity: 'Mythical',\n  image: '⭐',\n  probability: 0.03,\n  description: 'A divine mythical celestial being'\n}, {\n  id: '17',\n  name: 'Mythical Void',\n  rarity: 'Mythical',\n  image: '🌌',\n  probability: 0.03,\n  description: 'An enigmatic mythical void creature'\n},\n// Divine pets (1.5% probability)\n{\n  id: '18',\n  name: 'Divine Guardian',\n  rarity: 'Divine',\n  image: '👼',\n  probability: 0.015,\n  description: 'A sacred divine guardian'\n}, {\n  id: '19',\n  name: 'Divine Seraph',\n  rarity: 'Divine',\n  image: '😇',\n  probability: 0.015,\n  description: 'A holy divine seraph'\n},\n// Prismatic pets (0.5% probability)\n{\n  id: '20',\n  name: 'Prismatic Crystal',\n  rarity: 'Prismatic',\n  image: '💎',\n  probability: 0.005,\n  description: 'A rare prismatic crystal entity'\n}];\n\n// Cache for API pets\nlet cachedPets = null;\nexport const getPetsFromAPI = async () => {\n  if (cachedPets) {\n    return cachedPets;\n  }\n  cachedPets = await fetchPetsFromAPI();\n  return cachedPets;\n};\nexport const getRandomPets = count => {\n  // Use cached pets if available, otherwise use fallback\n  const pets = cachedPets || getFallbackPets();\n  const result = [];\n  const usedIndices = new Set();\n  for (let i = 0; i < count; i++) {\n    let attempts = 0;\n    let selectedPet;\n    do {\n      // Weighted random selection based on probability\n      const random = Math.random();\n      let cumulativeProbability = 0;\n      let selectedIndex = 0;\n      for (let j = 0; j < pets.length; j++) {\n        cumulativeProbability += pets[j].probability;\n        if (random <= cumulativeProbability) {\n          selectedIndex = j;\n          break;\n        }\n      }\n      selectedPet = pets[selectedIndex];\n      attempts++;\n    } while (usedIndices.has(selectedPet.id) && attempts < 100);\n    if (attempts >= 100) {\n      // If we can't find a unique pet, just pick any random one\n      selectedPet = pets[Math.floor(Math.random() * pets.length)];\n    }\n    result.push(selectedPet);\n    usedIndices.add(selectedPet.id);\n  }\n  return result;\n};\n\n// Initialize pets on app start\nexport const initializePets = async () => {\n  try {\n    await getPetsFromAPI();\n  } catch (error) {\n    console.error('Failed to initialize pets from API:', error);\n  }\n};","map":{"version":3,"names":["fetchPetsFromAPI","response","fetch","data","json","pets","map","pet","id","name","rarity","image","probability","description","error","console","getFallbackPets","cachedPets","getPetsFromAPI","getRandomPets","count","result","usedIndices","Set","i","attempts","selectedPet","random","Math","cumulativeProbability","selectedIndex","j","length","has","floor","push","add","initializePets"],"sources":["/Users/thitiwutphophan/shop/src/data/pets.ts"],"sourcesContent":["import { Pet } from '../types';\n\n// Fetch pets from the Grow a Garden API\nconst fetchPetsFromAPI = async (): Promise<Pet[]> => {\n  try {\n    const response = await fetch('https://api.joshlei.com/v2/growagarden/info/');\n    const data = await response.json();\n    \n    if (data && data.pets) {\n      return data.pets.map((pet: any) => ({\n        id: pet.id || pet.name,\n        name: pet.name,\n        rarity: pet.rarity || 'Common',\n        image: pet.image || '🐾',\n        probability: pet.probability || 0.1,\n        description: pet.description || `A ${pet.rarity || 'Common'} pet from Grow a Garden`\n      }));\n    }\n    \n    return [];\n  } catch (error) {\n    console.error('Error fetching pets from API:', error);\n    return getFallbackPets();\n  }\n};\n\n// Fallback pets in case API fails\nconst getFallbackPets = (): Pet[] => [\n  // Common pets (40% probability)\n  { id: '1', name: 'Common Cat', rarity: 'Common', image: '🐱', probability: 0.4, description: 'A friendly common cat' },\n  { id: '2', name: 'Common Dog', rarity: 'Common', image: '🐕', probability: 0.4, description: 'A loyal common dog' },\n  { id: '3', name: 'Common Bird', rarity: 'Common', image: '🐦', probability: 0.4, description: 'A cheerful common bird' },\n  { id: '4', name: 'Common Fish', rarity: 'Common', image: '🐠', probability: 0.4, description: 'A swimming common fish' },\n  \n  // Uncommon pets (25% probability)\n  { id: '5', name: 'Uncommon Fox', rarity: 'Uncommon', image: '🦊', probability: 0.25, description: 'A clever uncommon fox' },\n  { id: '6', name: 'Uncommon Rabbit', rarity: 'Uncommon', image: '🐰', probability: 0.25, description: 'A quick uncommon rabbit' },\n  { id: '7', name: 'Uncommon Bear', rarity: 'Uncommon', image: '🐻', probability: 0.25, description: 'A strong uncommon bear' },\n  { id: '8', name: 'Uncommon Deer', rarity: 'Uncommon', image: '🦌', probability: 0.25, description: 'A graceful uncommon deer' },\n  \n  // Rare pets (20% probability)\n  { id: '9', name: 'Rare Dragon', rarity: 'Rare', image: '🐉', probability: 0.2, description: 'A powerful rare dragon' },\n  { id: '10', name: 'Rare Phoenix', rarity: 'Rare', image: '🦅', probability: 0.2, description: 'A majestic rare phoenix' },\n  { id: '11', name: 'Rare Unicorn', rarity: 'Rare', image: '🦄', probability: 0.2, description: 'A magical rare unicorn' },\n  { id: '12', name: 'Rare Griffin', rarity: 'Rare', image: '🦁', probability: 0.2, description: 'A noble rare griffin' },\n  \n  // Legendary pets (10% probability)\n  { id: '13', name: 'Legendary Leviathan', rarity: 'Legendary', image: '🐋', probability: 0.1, description: 'A massive legendary leviathan' },\n  { id: '14', name: 'Legendary Kraken', rarity: 'Legendary', image: '🦑', probability: 0.1, description: 'A fearsome legendary kraken' },\n  { id: '15', name: 'Legendary Hydra', rarity: 'Legendary', image: '🐍', probability: 0.1, description: 'A multi-headed legendary hydra' },\n  \n  // Mythical pets (3% probability)\n  { id: '16', name: 'Mythical Celestial', rarity: 'Mythical', image: '⭐', probability: 0.03, description: 'A divine mythical celestial being' },\n  { id: '17', name: 'Mythical Void', rarity: 'Mythical', image: '🌌', probability: 0.03, description: 'An enigmatic mythical void creature' },\n  \n  // Divine pets (1.5% probability)\n  { id: '18', name: 'Divine Guardian', rarity: 'Divine', image: '👼', probability: 0.015, description: 'A sacred divine guardian' },\n  { id: '19', name: 'Divine Seraph', rarity: 'Divine', image: '😇', probability: 0.015, description: 'A holy divine seraph' },\n  \n  // Prismatic pets (0.5% probability)\n  { id: '20', name: 'Prismatic Crystal', rarity: 'Prismatic', image: '💎', probability: 0.005, description: 'A rare prismatic crystal entity' }\n];\n\n// Cache for API pets\nlet cachedPets: Pet[] | null = null;\n\nexport const getPetsFromAPI = async (): Promise<Pet[]> => {\n  if (cachedPets) {\n    return cachedPets;\n  }\n  \n  cachedPets = await fetchPetsFromAPI();\n  return cachedPets;\n};\n\nexport const getRandomPets = (count: number): Pet[] => {\n  // Use cached pets if available, otherwise use fallback\n  const pets = cachedPets || getFallbackPets();\n  \n  const result: Pet[] = [];\n  const usedIndices = new Set<number>();\n  \n  for (let i = 0; i < count; i++) {\n    let attempts = 0;\n    let selectedPet: Pet;\n    \n    do {\n      // Weighted random selection based on probability\n      const random = Math.random();\n      let cumulativeProbability = 0;\n      let selectedIndex = 0;\n      \n      for (let j = 0; j < pets.length; j++) {\n        cumulativeProbability += pets[j].probability;\n        if (random <= cumulativeProbability) {\n          selectedIndex = j;\n          break;\n        }\n      }\n      \n      selectedPet = pets[selectedIndex];\n      attempts++;\n    } while (usedIndices.has(selectedPet.id) && attempts < 100);\n    \n    if (attempts >= 100) {\n      // If we can't find a unique pet, just pick any random one\n      selectedPet = pets[Math.floor(Math.random() * pets.length)];\n    }\n    \n    result.push(selectedPet);\n    usedIndices.add(selectedPet.id);\n  }\n  \n  return result;\n};\n\n// Initialize pets on app start\nexport const initializePets = async (): Promise<void> => {\n  try {\n    await getPetsFromAPI();\n  } catch (error) {\n    console.error('Failed to initialize pets from API:', error);\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}