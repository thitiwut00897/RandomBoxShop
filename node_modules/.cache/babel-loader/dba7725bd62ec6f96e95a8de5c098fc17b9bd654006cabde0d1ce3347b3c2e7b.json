{"ast":null,"code":"var _LineNotificationService;class LineNotificationService{constructor(){this.notifications=[];}static getInstance(){if(!LineNotificationService.instance){LineNotificationService.instance=new LineNotificationService();}return LineNotificationService.instance;}async sendNotification(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'info';const notification={message,timestamp:new Date(),type};this.notifications.push(notification);// In a real application, you would integrate with Line Notify API\n// For now, we'll simulate the API call\nconsole.log(\"[LINE NOTIFICATION] \".concat(type.toUpperCase(),\": \").concat(message));// Simulate API delay\nawait new Promise(resolve=>setTimeout(resolve,1000));// You would typically make an HTTP request to Line Notify API like this:\n/*\n    const response = await fetch('https://notify-api.line.me/api/notify', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${process.env.REACT_APP_LINE_NOTIFY_TOKEN}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: `message=${encodeURIComponent(message)}`,\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to send Line notification');\n    }\n    */}async sendPurchaseSuccessNotification(userName,orderTotal,items){const message=\"\\uD83C\\uDF89 Purchase Successful!\\n\\nUser: \".concat(userName,\"\\nTotal: $\").concat(orderTotal.toFixed(2),\"\\nItems: \").concat(items.join(', '),\"\\n\\nThank you for your purchase!\");await this.sendNotification(message,'success');}async sendSpinnerWinNotification(userName,itemName,rarity){const message=\"\\uD83C\\uDFB0 Loot Box!\\n\\nUser: \".concat(userName,\"\\nWon: \").concat(itemName,\"\\nRarity: \").concat(rarity.toUpperCase(),\"\\n\\nCongratulations!\");await this.sendNotification(message,'success');}async sendPetBoxPurchaseNotification(userName,pets){const rarityCounts=pets.reduce((acc,pet)=>{acc[pet.rarity]=(acc[pet.rarity]||0)+1;return acc;},{});const raritySummary=Object.entries(rarityCounts).map(_ref=>{let[rarity,count]=_ref;return\"\".concat(rarity,\": \").concat(count);}).join(', ');const topRarity=pets.reduce((highest,pet)=>{const rarityOrder=['Common','Uncommon','Rare','Legendary','Mythical','Divine','Prismatic'];const currentIndex=rarityOrder.indexOf(pet.rarity);const highestIndex=rarityOrder.indexOf(highest.rarity);return currentIndex>highestIndex?pet:highest;});const message=\"\\uD83D\\uDC3E Pet Box Opened!\\n\\nUser: \".concat(userName,\"\\nBox Contents: \").concat(raritySummary,\"\\n\\nBest Pet: \").concat(topRarity.name,\" (\").concat(topRarity.rarity,\")\\n\\n\").concat(pets.map(pet=>\"\".concat(pet.image,\" \").concat(pet.name)).join('\\n'),\"\\n\\nEnjoy your new pets!\");await this.sendNotification(message,'success');}getNotifications(){return[...this.notifications];}clearNotifications(){this.notifications=[];}}_LineNotificationService=LineNotificationService;LineNotificationService.instance=void 0;export const lineNotificationService=LineNotificationService.getInstance();","map":{"version":3,"names":["LineNotificationService","constructor","notifications","getInstance","instance","sendNotification","message","type","arguments","length","undefined","notification","timestamp","Date","push","console","log","concat","toUpperCase","Promise","resolve","setTimeout","sendPurchaseSuccessNotification","userName","orderTotal","items","toFixed","join","sendSpinnerWinNotification","itemName","rarity","sendPetBoxPurchaseNotification","pets","rarityCounts","reduce","acc","pet","raritySummary","Object","entries","map","_ref","count","topRarity","highest","rarityOrder","currentIndex","indexOf","highestIndex","name","image","getNotifications","clearNotifications","_LineNotificationService","lineNotificationService"],"sources":["/Users/thitiwutphophan/shop/src/services/lineNotification.ts"],"sourcesContent":["import { LineNotification, Pet } from '../types';\n\nclass LineNotificationService {\n  private static instance: LineNotificationService;\n  private notifications: LineNotification[] = [];\n\n  private constructor() {}\n\n  static getInstance(): LineNotificationService {\n    if (!LineNotificationService.instance) {\n      LineNotificationService.instance = new LineNotificationService();\n    }\n    return LineNotificationService.instance;\n  }\n\n  async sendNotification(message: string, type: 'success' | 'error' | 'info' = 'info'): Promise<void> {\n    const notification: LineNotification = {\n      message,\n      timestamp: new Date(),\n      type,\n    };\n\n    this.notifications.push(notification);\n\n    // In a real application, you would integrate with Line Notify API\n    // For now, we'll simulate the API call\n    console.log(`[LINE NOTIFICATION] ${type.toUpperCase()}: ${message}`);\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // You would typically make an HTTP request to Line Notify API like this:\n    /*\n    const response = await fetch('https://notify-api.line.me/api/notify', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${process.env.REACT_APP_LINE_NOTIFY_TOKEN}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: `message=${encodeURIComponent(message)}`,\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to send Line notification');\n    }\n    */\n  }\n\n  async sendPurchaseSuccessNotification(userName: string, orderTotal: number, items: string[]): Promise<void> {\n    const message = `🎉 Purchase Successful!\\n\\nUser: ${userName}\\nTotal: $${orderTotal.toFixed(2)}\\nItems: ${items.join(', ')}\\n\\nThank you for your purchase!`;\n    \n    await this.sendNotification(message, 'success');\n  }\n\n  async sendSpinnerWinNotification(userName: string, itemName: string, rarity: string): Promise<void> {\n    const message = `🎰 Loot Box!\\n\\nUser: ${userName}\\nWon: ${itemName}\\nRarity: ${rarity.toUpperCase()}\\n\\nCongratulations!`;\n    \n    await this.sendNotification(message, 'success');\n  }\n\n  async sendPetBoxPurchaseNotification(userName: string, pets: Pet[]): Promise<void> {\n    const rarityCounts = pets.reduce((acc, pet) => {\n      acc[pet.rarity] = (acc[pet.rarity] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const raritySummary = Object.entries(rarityCounts)\n      .map(([rarity, count]) => `${rarity}: ${count}`)\n      .join(', ');\n\n    const topRarity = pets.reduce((highest, pet) => {\n      const rarityOrder = ['Common', 'Uncommon', 'Rare', 'Legendary', 'Mythical', 'Divine', 'Prismatic'];\n      const currentIndex = rarityOrder.indexOf(pet.rarity);\n      const highestIndex = rarityOrder.indexOf(highest.rarity);\n      return currentIndex > highestIndex ? pet : highest;\n    });\n\n    const message = `🐾 Pet Box Opened!\\n\\nUser: ${userName}\\nBox Contents: ${raritySummary}\\n\\nBest Pet: ${topRarity.name} (${topRarity.rarity})\\n\\n${pets.map(pet => `${pet.image} ${pet.name}`).join('\\n')}\\n\\nEnjoy your new pets!`;\n    \n    await this.sendNotification(message, 'success');\n  }\n\n  getNotifications(): LineNotification[] {\n    return [...this.notifications];\n  }\n\n  clearNotifications(): void {\n    this.notifications = [];\n  }\n}\n\nexport const lineNotificationService = LineNotificationService.getInstance(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}