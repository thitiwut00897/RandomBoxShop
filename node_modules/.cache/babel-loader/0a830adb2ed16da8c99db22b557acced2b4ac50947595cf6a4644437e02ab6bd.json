{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const SpinnerContext=/*#__PURE__*/createContext(undefined);export const useSpinner=()=>{const context=useContext(SpinnerContext);if(context===undefined){throw new Error('useSpinner must be used within a SpinnerProvider');}return context;};// Sample spinner items with different rarities\nconst spinnerItems=[// Common items (60% probability)\n{id:'1',name:'Common Sword',rarity:'common',image:'‚öîÔ∏è',probability:0.6},{id:'2',name:'Basic Shield',rarity:'common',image:'üõ°Ô∏è',probability:0.6},{id:'3',name:'Simple Potion',rarity:'common',image:'üß™',probability:0.6},{id:'4',name:'Wooden Bow',rarity:'common',image:'üèπ',probability:0.6},// Rare items (25% probability)\n{id:'5',name:'Magic Staff',rarity:'rare',image:'üîÆ',probability:0.25},{id:'6',name:'Steel Armor',rarity:'rare',image:'ü•ã',probability:0.25},{id:'7',name:'Healing Crystal',rarity:'rare',image:'üíé',probability:0.25},{id:'8',name:'Enchanted Ring',rarity:'rare',image:'üíç',probability:0.25},// Epic items (10% probability)\n{id:'9',name:'Dragon Scale',rarity:'epic',image:'üêâ',probability:0.1},{id:'10',name:'Ancient Relic',rarity:'epic',image:'üè∫',probability:0.1},{id:'11',name:'Phoenix Feather',rarity:'epic',image:'üî•',probability:0.1},// Legendary items (5% probability)\n{id:'12',name:'Excalibur',rarity:'legendary',image:'‚öúÔ∏è',probability:0.05},{id:'13',name:'Crown of Kings',rarity:'legendary',image:'üëë',probability:0.05},{id:'14',name:'Infinity Stone',rarity:'legendary',image:'üíé',probability:0.05}];export const SpinnerProvider=_ref=>{let{children}=_ref;const[isSpinning,setIsSpinning]=useState(false);const[currentItem,setCurrentItem]=useState(null);const getRandomItem=()=>{const random=Math.random();let cumulativeProbability=0;for(const item of spinnerItems){cumulativeProbability+=item.probability;if(random<=cumulativeProbability){return item;}}// Fallback to common item\nreturn spinnerItems[0];};const spin=async()=>{setIsSpinning(true);// Simulate spinning animation\nawait new Promise(resolve=>setTimeout(resolve,3000));const wonItem=getRandomItem();setCurrentItem(wonItem);setIsSpinning(false);return wonItem;};const resetSpinner=()=>{setCurrentItem(null);};const value={isSpinning,currentItem,spin,resetSpinner};return/*#__PURE__*/_jsx(SpinnerContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","SpinnerContext","undefined","useSpinner","context","Error","spinnerItems","id","name","rarity","image","probability","SpinnerProvider","_ref","children","isSpinning","setIsSpinning","currentItem","setCurrentItem","getRandomItem","random","Math","cumulativeProbability","item","spin","Promise","resolve","setTimeout","wonItem","resetSpinner","value","Provider"],"sources":["/Users/thitiwutphophan/shop/src/contexts/SpinnerContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { SpinnerItem } from '../types';\n\ninterface SpinnerContextType {\n  isSpinning: boolean;\n  currentItem: SpinnerItem | null;\n  spin: () => Promise<SpinnerItem>;\n  resetSpinner: () => void;\n}\n\nconst SpinnerContext = createContext<SpinnerContextType | undefined>(undefined);\n\nexport const useSpinner = () => {\n  const context = useContext(SpinnerContext);\n  if (context === undefined) {\n    throw new Error('useSpinner must be used within a SpinnerProvider');\n  }\n  return context;\n};\n\ninterface SpinnerProviderProps {\n  children: ReactNode;\n}\n\n// Sample spinner items with different rarities\nconst spinnerItems: SpinnerItem[] = [\n  // Common items (60% probability)\n  { id: '1', name: 'Common Sword', rarity: 'common', image: '‚öîÔ∏è', probability: 0.6 },\n  { id: '2', name: 'Basic Shield', rarity: 'common', image: 'üõ°Ô∏è', probability: 0.6 },\n  { id: '3', name: 'Simple Potion', rarity: 'common', image: 'üß™', probability: 0.6 },\n  { id: '4', name: 'Wooden Bow', rarity: 'common', image: 'üèπ', probability: 0.6 },\n  \n  // Rare items (25% probability)\n  { id: '5', name: 'Magic Staff', rarity: 'rare', image: 'üîÆ', probability: 0.25 },\n  { id: '6', name: 'Steel Armor', rarity: 'rare', image: 'ü•ã', probability: 0.25 },\n  { id: '7', name: 'Healing Crystal', rarity: 'rare', image: 'üíé', probability: 0.25 },\n  { id: '8', name: 'Enchanted Ring', rarity: 'rare', image: 'üíç', probability: 0.25 },\n  \n  // Epic items (10% probability)\n  { id: '9', name: 'Dragon Scale', rarity: 'epic', image: 'üêâ', probability: 0.1 },\n  { id: '10', name: 'Ancient Relic', rarity: 'epic', image: 'üè∫', probability: 0.1 },\n  { id: '11', name: 'Phoenix Feather', rarity: 'epic', image: 'üî•', probability: 0.1 },\n  \n  // Legendary items (5% probability)\n  { id: '12', name: 'Excalibur', rarity: 'legendary', image: '‚öúÔ∏è', probability: 0.05 },\n  { id: '13', name: 'Crown of Kings', rarity: 'legendary', image: 'üëë', probability: 0.05 },\n  { id: '14', name: 'Infinity Stone', rarity: 'legendary', image: 'üíé', probability: 0.05 },\n];\n\nexport const SpinnerProvider: React.FC<SpinnerProviderProps> = ({ children }) => {\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [currentItem, setCurrentItem] = useState<SpinnerItem | null>(null);\n\n  const getRandomItem = (): SpinnerItem => {\n    const random = Math.random();\n    let cumulativeProbability = 0;\n    \n    for (const item of spinnerItems) {\n      cumulativeProbability += item.probability;\n      if (random <= cumulativeProbability) {\n        return item;\n      }\n    }\n    \n    // Fallback to common item\n    return spinnerItems[0];\n  };\n\n  const spin = async (): Promise<SpinnerItem> => {\n    setIsSpinning(true);\n    \n    // Simulate spinning animation\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    \n    const wonItem = getRandomItem();\n    setCurrentItem(wonItem);\n    setIsSpinning(false);\n    \n    return wonItem;\n  };\n\n  const resetSpinner = () => {\n    setCurrentItem(null);\n  };\n\n  const value = {\n    isSpinning,\n    currentItem,\n    spin,\n    resetSpinner,\n  };\n\n  return (\n    <SpinnerContext.Provider value={value}>\n      {children}\n    </SpinnerContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}